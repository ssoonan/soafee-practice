// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LaneDetectionTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "LaneDetectionTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "LaneDetection.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace LaneDetectionModule {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_LaneLine_type_identifier(
        TypeIdentifierPair& type_ids_LaneLine)
{

    ReturnCode_t return_code_LaneLine {eprosima::fastdds::dds::RETCODE_OK};
    return_code_LaneLine =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "LaneDetectionModule::LaneLine", type_ids_LaneLine);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_LaneLine)
    {
        StructTypeFlag struct_flags_LaneLine = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_LaneLine = "LaneDetectionModule::LaneLine";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LaneLine;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LaneLine;
        CompleteTypeDetail detail_LaneLine = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LaneLine, ann_custom_LaneLine, type_name_LaneLine.to_string());
        CompleteStructHeader header_LaneLine;
        header_LaneLine = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LaneLine);
        CompleteStructMemberSeq member_seq_LaneLine;
        {
            TypeIdentifierPair type_ids_x1;
            ReturnCode_t return_code_x1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_x1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x1 = 0x00000000;
            bool common_x1_ec {false};
            CommonStructMember common_x1 {TypeObjectUtils::build_common_struct_member(member_id_x1, member_flags_x1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x1, common_x1_ec))};
            if (!common_x1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x1 = "x1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x1;
            ann_custom_LaneLine.reset();
            CompleteMemberDetail detail_x1 = TypeObjectUtils::build_complete_member_detail(name_x1, member_ann_builtin_x1, ann_custom_LaneLine);
            CompleteStructMember member_x1 = TypeObjectUtils::build_complete_struct_member(common_x1, detail_x1);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneLine, member_x1);
        }
        {
            TypeIdentifierPair type_ids_y1;
            ReturnCode_t return_code_y1 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y1 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_y1);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y1)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y1 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y1 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y1 = 0x00000001;
            bool common_y1_ec {false};
            CommonStructMember common_y1 {TypeObjectUtils::build_common_struct_member(member_id_y1, member_flags_y1, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y1, common_y1_ec))};
            if (!common_y1_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y1 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y1 = "y1";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y1;
            ann_custom_LaneLine.reset();
            CompleteMemberDetail detail_y1 = TypeObjectUtils::build_complete_member_detail(name_y1, member_ann_builtin_y1, ann_custom_LaneLine);
            CompleteStructMember member_y1 = TypeObjectUtils::build_complete_struct_member(common_y1, detail_y1);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneLine, member_y1);
        }
        {
            TypeIdentifierPair type_ids_x2;
            ReturnCode_t return_code_x2 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_x2);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x2)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x2 = 0x00000002;
            bool common_x2_ec {false};
            CommonStructMember common_x2 {TypeObjectUtils::build_common_struct_member(member_id_x2, member_flags_x2, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x2, common_x2_ec))};
            if (!common_x2_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x2 = "x2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x2;
            ann_custom_LaneLine.reset();
            CompleteMemberDetail detail_x2 = TypeObjectUtils::build_complete_member_detail(name_x2, member_ann_builtin_x2, ann_custom_LaneLine);
            CompleteStructMember member_x2 = TypeObjectUtils::build_complete_struct_member(common_x2, detail_x2);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneLine, member_x2);
        }
        {
            TypeIdentifierPair type_ids_y2;
            ReturnCode_t return_code_y2 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_y2);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y2)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y2 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y2 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y2 = 0x00000003;
            bool common_y2_ec {false};
            CommonStructMember common_y2 {TypeObjectUtils::build_common_struct_member(member_id_y2, member_flags_y2, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y2, common_y2_ec))};
            if (!common_y2_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y2 = "y2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y2;
            ann_custom_LaneLine.reset();
            CompleteMemberDetail detail_y2 = TypeObjectUtils::build_complete_member_detail(name_y2, member_ann_builtin_y2, ann_custom_LaneLine);
            CompleteStructMember member_y2 = TypeObjectUtils::build_complete_struct_member(common_y2, detail_y2);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneLine, member_y2);
        }
        CompleteStructType struct_type_LaneLine = TypeObjectUtils::build_complete_struct_type(struct_flags_LaneLine, header_LaneLine, member_seq_LaneLine);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LaneLine, type_name_LaneLine.to_string(), type_ids_LaneLine))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LaneDetectionModule::LaneLine already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_LaneDetectionResult_type_identifier(
        TypeIdentifierPair& type_ids_LaneDetectionResult)
{

    ReturnCode_t return_code_LaneDetectionResult {eprosima::fastdds::dds::RETCODE_OK};
    return_code_LaneDetectionResult =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "LaneDetectionModule::LaneDetectionResult", type_ids_LaneDetectionResult);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_LaneDetectionResult)
    {
        StructTypeFlag struct_flags_LaneDetectionResult = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_LaneDetectionResult = "LaneDetectionModule::LaneDetectionResult";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LaneDetectionResult;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LaneDetectionResult;
        CompleteTypeDetail detail_LaneDetectionResult = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LaneDetectionResult, ann_custom_LaneDetectionResult, type_name_LaneDetectionResult.to_string());
        CompleteStructHeader header_LaneDetectionResult;
        header_LaneDetectionResult = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LaneDetectionResult);
        CompleteStructMemberSeq member_seq_LaneDetectionResult;
        {
            TypeIdentifierPair type_ids_left_lane;
            ReturnCode_t return_code_left_lane {eprosima::fastdds::dds::RETCODE_OK};
            return_code_left_lane =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "LaneDetectionModule::LaneLine", type_ids_left_lane);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_left_lane)
            {
                LaneDetectionModule::register_LaneLine_type_identifier(type_ids_left_lane);
            }
            StructMemberFlag member_flags_left_lane = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_left_lane = 0x00000000;
            bool common_left_lane_ec {false};
            CommonStructMember common_left_lane {TypeObjectUtils::build_common_struct_member(member_id_left_lane, member_flags_left_lane, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_left_lane, common_left_lane_ec))};
            if (!common_left_lane_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure left_lane member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_left_lane = "left_lane";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_left_lane;
            ann_custom_LaneDetectionResult.reset();
            CompleteMemberDetail detail_left_lane = TypeObjectUtils::build_complete_member_detail(name_left_lane, member_ann_builtin_left_lane, ann_custom_LaneDetectionResult);
            CompleteStructMember member_left_lane = TypeObjectUtils::build_complete_struct_member(common_left_lane, detail_left_lane);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneDetectionResult, member_left_lane);
        }
        {
            TypeIdentifierPair type_ids_right_lane;
            ReturnCode_t return_code_right_lane {eprosima::fastdds::dds::RETCODE_OK};
            return_code_right_lane =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "LaneDetectionModule::LaneLine", type_ids_right_lane);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_right_lane)
            {
                LaneDetectionModule::register_LaneLine_type_identifier(type_ids_right_lane);
            }
            StructMemberFlag member_flags_right_lane = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_right_lane = 0x00000001;
            bool common_right_lane_ec {false};
            CommonStructMember common_right_lane {TypeObjectUtils::build_common_struct_member(member_id_right_lane, member_flags_right_lane, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_right_lane, common_right_lane_ec))};
            if (!common_right_lane_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure right_lane member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_right_lane = "right_lane";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_right_lane;
            ann_custom_LaneDetectionResult.reset();
            CompleteMemberDetail detail_right_lane = TypeObjectUtils::build_complete_member_detail(name_right_lane, member_ann_builtin_right_lane, ann_custom_LaneDetectionResult);
            CompleteStructMember member_right_lane = TypeObjectUtils::build_complete_struct_member(common_right_lane, detail_right_lane);
            TypeObjectUtils::add_complete_struct_member(member_seq_LaneDetectionResult, member_right_lane);
        }
        CompleteStructType struct_type_LaneDetectionResult = TypeObjectUtils::build_complete_struct_type(struct_flags_LaneDetectionResult, header_LaneDetectionResult, member_seq_LaneDetectionResult);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LaneDetectionResult, type_name_LaneDetectionResult.to_string(), type_ids_LaneDetectionResult))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LaneDetectionModule::LaneDetectionResult already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace LaneDetectionModule

