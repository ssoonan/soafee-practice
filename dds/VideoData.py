# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('VideoData.dll')
if __package__ or '.' in __name__:
    from . import _VideoDataWrapper
else:
    import _VideoDataWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VideoDataWrapper.delete_SwigPyIterator

    def value(self):
        return _VideoDataWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VideoDataWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VideoDataWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VideoDataWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VideoDataWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VideoDataWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _VideoDataWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _VideoDataWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _VideoDataWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VideoDataWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VideoDataWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VideoDataWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VideoDataWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VideoDataWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VideoDataWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VideoDataWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VideoDataWrapper:
_VideoDataWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _VideoDataWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _VideoDataWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _VideoDataWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _VideoDataWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _VideoDataWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _VideoDataWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _VideoDataWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _VideoDataWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class uint8_t_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VideoDataWrapper.uint8_t_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VideoDataWrapper.uint8_t_vector___nonzero__(self)

    def __bool__(self):
        return _VideoDataWrapper.uint8_t_vector___bool__(self)

    def __len__(self):
        return _VideoDataWrapper.uint8_t_vector___len__(self)

    def __getslice__(self, i, j):
        return _VideoDataWrapper.uint8_t_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VideoDataWrapper.uint8_t_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VideoDataWrapper.uint8_t_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VideoDataWrapper.uint8_t_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VideoDataWrapper.uint8_t_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VideoDataWrapper.uint8_t_vector___setitem__(self, *args)

    def pop(self):
        return _VideoDataWrapper.uint8_t_vector_pop(self)

    def append(self, x):
        return _VideoDataWrapper.uint8_t_vector_append(self, x)

    def empty(self):
        return _VideoDataWrapper.uint8_t_vector_empty(self)

    def size(self):
        return _VideoDataWrapper.uint8_t_vector_size(self)

    def swap(self, v):
        return _VideoDataWrapper.uint8_t_vector_swap(self, v)

    def begin(self):
        return _VideoDataWrapper.uint8_t_vector_begin(self)

    def end(self):
        return _VideoDataWrapper.uint8_t_vector_end(self)

    def rbegin(self):
        return _VideoDataWrapper.uint8_t_vector_rbegin(self)

    def rend(self):
        return _VideoDataWrapper.uint8_t_vector_rend(self)

    def clear(self):
        return _VideoDataWrapper.uint8_t_vector_clear(self)

    def get_allocator(self):
        return _VideoDataWrapper.uint8_t_vector_get_allocator(self)

    def pop_back(self):
        return _VideoDataWrapper.uint8_t_vector_pop_back(self)

    def erase(self, *args):
        return _VideoDataWrapper.uint8_t_vector_erase(self, *args)

    def __init__(self, *args):
        _VideoDataWrapper.uint8_t_vector_swiginit(self, _VideoDataWrapper.new_uint8_t_vector(*args))

    def push_back(self, x):
        return _VideoDataWrapper.uint8_t_vector_push_back(self, x)

    def front(self):
        return _VideoDataWrapper.uint8_t_vector_front(self)

    def back(self):
        return _VideoDataWrapper.uint8_t_vector_back(self)

    def assign(self, n, x):
        return _VideoDataWrapper.uint8_t_vector_assign(self, n, x)

    def resize(self, *args):
        return _VideoDataWrapper.uint8_t_vector_resize(self, *args)

    def insert(self, *args):
        return _VideoDataWrapper.uint8_t_vector_insert(self, *args)

    def reserve(self, n):
        return _VideoDataWrapper.uint8_t_vector_reserve(self, n)

    def capacity(self):
        return _VideoDataWrapper.uint8_t_vector_capacity(self)

    def get_buffer(self):
        return _VideoDataWrapper.uint8_t_vector_get_buffer(self)
    __swig_destroy__ = _VideoDataWrapper.delete_uint8_t_vector

# Register uint8_t_vector in _VideoDataWrapper:
_VideoDataWrapper.uint8_t_vector_swigregister(uint8_t_vector)

class _VideoDataSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VideoDataWrapper.delete__VideoDataSeq

# Register _VideoDataSeq in _VideoDataWrapper:
_VideoDataWrapper._VideoDataSeq_swigregister(_VideoDataSeq)

class VideoDataSeq(_VideoDataSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _VideoDataWrapper.delete_VideoDataSeq

    def __init__(self, *args):
        _VideoDataWrapper.VideoDataSeq_swiginit(self, _VideoDataWrapper.new_VideoDataSeq(*args))

    def __len__(self):
        return _VideoDataWrapper.VideoDataSeq___len__(self)

    def __getitem__(self, i):
        return _VideoDataWrapper.VideoDataSeq___getitem__(self, i)

# Register VideoDataSeq in _VideoDataWrapper:
_VideoDataWrapper.VideoDataSeq_swigregister(VideoDataSeq)

class VideoData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _VideoDataWrapper.delete_VideoData

    def __init__(self, *args):
        _VideoDataWrapper.VideoData_swiginit(self, _VideoDataWrapper.new_VideoData(*args))

    def __eq__(self, x):
        return _VideoDataWrapper.VideoData___eq__(self, x)

    def __ne__(self, x):
        return _VideoDataWrapper.VideoData___ne__(self, x)

    def data(self, *args):
        return _VideoDataWrapper.VideoData_data(self, *args)

# Register VideoData in _VideoDataWrapper:
_VideoDataWrapper.VideoData_swigregister(VideoData)

FASTDDS_GEN_API_VER = _VideoDataWrapper.FASTDDS_GEN_API_VER
class VideoDataPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VideoDataWrapper.VideoDataPubSubType_swiginit(self, _VideoDataWrapper.new_VideoDataPubSubType())
    __swig_destroy__ = _VideoDataWrapper.delete_VideoDataPubSubType

    def serialize(self, data, payload, data_representation):
        return _VideoDataWrapper.VideoDataPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _VideoDataWrapper.VideoDataPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _VideoDataWrapper.VideoDataPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _VideoDataWrapper.VideoDataPubSubType_compute_key(self, *args)

    def create_data(self):
        return _VideoDataWrapper.VideoDataPubSubType_create_data(self)

    def delete_data(self, data):
        return _VideoDataWrapper.VideoDataPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _VideoDataWrapper.VideoDataPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _VideoDataWrapper.VideoDataPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _VideoDataWrapper.VideoDataPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _VideoDataWrapper.VideoDataPubSubType_construct_sample(self, memory)

# Register VideoDataPubSubType in _VideoDataWrapper:
_VideoDataWrapper.VideoDataPubSubType_swigregister(VideoDataPubSubType)



