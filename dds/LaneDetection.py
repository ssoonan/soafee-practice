# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

if __import__('os').name == 'nt': import win32api; win32api.LoadLibrary('LaneDetection.dll')
if __package__ or '.' in __name__:
    from . import _LaneDetectionWrapper
else:
    import _LaneDetectionWrapper

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete_SwigPyIterator

    def value(self):
        return _LaneDetectionWrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LaneDetectionWrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LaneDetectionWrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LaneDetectionWrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LaneDetectionWrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LaneDetectionWrapper.SwigPyIterator_copy(self)

    def next(self):
        return _LaneDetectionWrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _LaneDetectionWrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _LaneDetectionWrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LaneDetectionWrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LaneDetectionWrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LaneDetectionWrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LaneDetectionWrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LaneDetectionWrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LaneDetectionWrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LaneDetectionWrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _LaneDetectionWrapper:
_LaneDetectionWrapper.SwigPyIterator_swigregister(SwigPyIterator)

FASTCDR_VERSION_MAJOR = _LaneDetectionWrapper.FASTCDR_VERSION_MAJOR
FASTCDR_VERSION_MINOR = _LaneDetectionWrapper.FASTCDR_VERSION_MINOR
FASTCDR_VERSION_MICRO = _LaneDetectionWrapper.FASTCDR_VERSION_MICRO
FASTCDR_VERSION_STR = _LaneDetectionWrapper.FASTCDR_VERSION_STR
HAVE_CXX11 = _LaneDetectionWrapper.HAVE_CXX11
FASTCDR_IS_BIG_ENDIAN_TARGET = _LaneDetectionWrapper.FASTCDR_IS_BIG_ENDIAN_TARGET
FASTCDR_HAVE_FLOAT128 = _LaneDetectionWrapper.FASTCDR_HAVE_FLOAT128
FASTCDR_SIZEOF_LONG_DOUBLE = _LaneDetectionWrapper.FASTCDR_SIZEOF_LONG_DOUBLE
import fastdds
class _LaneLineSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete__LaneLineSeq

# Register _LaneLineSeq in _LaneDetectionWrapper:
_LaneDetectionWrapper._LaneLineSeq_swigregister(_LaneLineSeq)

class LaneLineSeq(_LaneLineSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneLineSeq

    def __init__(self, *args):
        _LaneDetectionWrapper.LaneLineSeq_swiginit(self, _LaneDetectionWrapper.new_LaneLineSeq(*args))

    def __len__(self):
        return _LaneDetectionWrapper.LaneLineSeq___len__(self)

    def __getitem__(self, i):
        return _LaneDetectionWrapper.LaneLineSeq___getitem__(self, i)

# Register LaneLineSeq in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneLineSeq_swigregister(LaneLineSeq)

class _LaneDetectionResultSeq(fastdds.LoanableCollection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete__LaneDetectionResultSeq

# Register _LaneDetectionResultSeq in _LaneDetectionWrapper:
_LaneDetectionWrapper._LaneDetectionResultSeq_swigregister(_LaneDetectionResultSeq)

class LaneDetectionResultSeq(_LaneDetectionResultSeq):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneDetectionResultSeq

    def __init__(self, *args):
        _LaneDetectionWrapper.LaneDetectionResultSeq_swiginit(self, _LaneDetectionWrapper.new_LaneDetectionResultSeq(*args))

    def __len__(self):
        return _LaneDetectionWrapper.LaneDetectionResultSeq___len__(self)

    def __getitem__(self, i):
        return _LaneDetectionWrapper.LaneDetectionResultSeq___getitem__(self, i)

# Register LaneDetectionResultSeq in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneDetectionResultSeq_swigregister(LaneDetectionResultSeq)

class LaneLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneLine

    def __init__(self, *args):
        _LaneDetectionWrapper.LaneLine_swiginit(self, _LaneDetectionWrapper.new_LaneLine(*args))

    def __eq__(self, x):
        return _LaneDetectionWrapper.LaneLine___eq__(self, x)

    def __ne__(self, x):
        return _LaneDetectionWrapper.LaneLine___ne__(self, x)

    def x1(self, *args):
        return _LaneDetectionWrapper.LaneLine_x1(self, *args)

    def y1(self, *args):
        return _LaneDetectionWrapper.LaneLine_y1(self, *args)

    def x2(self, *args):
        return _LaneDetectionWrapper.LaneLine_x2(self, *args)

    def y2(self, *args):
        return _LaneDetectionWrapper.LaneLine_y2(self, *args)

# Register LaneLine in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneLine_swigregister(LaneLine)

class LaneDetectionResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneDetectionResult

    def __init__(self, *args):
        _LaneDetectionWrapper.LaneDetectionResult_swiginit(self, _LaneDetectionWrapper.new_LaneDetectionResult(*args))

    def __eq__(self, x):
        return _LaneDetectionWrapper.LaneDetectionResult___eq__(self, x)

    def __ne__(self, x):
        return _LaneDetectionWrapper.LaneDetectionResult___ne__(self, x)

    def left_lane(self, *args):
        return _LaneDetectionWrapper.LaneDetectionResult_left_lane(self, *args)

    def right_lane(self, *args):
        return _LaneDetectionWrapper.LaneDetectionResult_right_lane(self, *args)

# Register LaneDetectionResult in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneDetectionResult_swigregister(LaneDetectionResult)

FASTDDS_GEN_API_VER = _LaneDetectionWrapper.FASTDDS_GEN_API_VER
class LaneLinePubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LaneDetectionWrapper.LaneLinePubSubType_swiginit(self, _LaneDetectionWrapper.new_LaneLinePubSubType())
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneLinePubSubType

    def serialize(self, data, payload, data_representation):
        return _LaneDetectionWrapper.LaneLinePubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LaneDetectionWrapper.LaneLinePubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LaneDetectionWrapper.LaneLinePubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LaneDetectionWrapper.LaneLinePubSubType_compute_key(self, *args)

    def create_data(self):
        return _LaneDetectionWrapper.LaneLinePubSubType_create_data(self)

    def delete_data(self, data):
        return _LaneDetectionWrapper.LaneLinePubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LaneDetectionWrapper.LaneLinePubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LaneDetectionWrapper.LaneLinePubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LaneDetectionWrapper.LaneLinePubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LaneDetectionWrapper.LaneLinePubSubType_construct_sample(self, memory)

# Register LaneLinePubSubType in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneLinePubSubType_swigregister(LaneLinePubSubType)

class LaneDetectionResultPubSubType(fastdds.TopicDataType):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _LaneDetectionWrapper.LaneDetectionResultPubSubType_swiginit(self, _LaneDetectionWrapper.new_LaneDetectionResultPubSubType())
    __swig_destroy__ = _LaneDetectionWrapper.delete_LaneDetectionResultPubSubType

    def serialize(self, data, payload, data_representation):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_serialize(self, data, payload, data_representation)

    def deserialize(self, payload, data):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_deserialize(self, payload, data)

    def calculate_serialized_size(self, data, data_representation):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_calculate_serialized_size(self, data, data_representation)

    def compute_key(self, *args):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_compute_key(self, *args)

    def create_data(self):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_create_data(self)

    def delete_data(self, data):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_delete_data(self, data)

    def register_type_object_representation(self):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_register_type_object_representation(self)

    def is_bounded(self):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_is_bounded(self)

    def is_plain(self, data_representation):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_is_plain(self, data_representation)

    def construct_sample(self, memory):
        return _LaneDetectionWrapper.LaneDetectionResultPubSubType_construct_sample(self, memory)

# Register LaneDetectionResultPubSubType in _LaneDetectionWrapper:
_LaneDetectionWrapper.LaneDetectionResultPubSubType_swigregister(LaneDetectionResultPubSubType)



