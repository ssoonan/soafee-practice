// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ObjectDetection.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__OBJECTDETECTIONMODULE_OBJECTDETECTION_HPP
#define FAST_DDS_GENERATED__OBJECTDETECTIONMODULE_OBJECTDETECTION_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(OBJECTDETECTION_SOURCE)
#define OBJECTDETECTION_DllAPI __declspec( dllexport )
#else
#define OBJECTDETECTION_DllAPI __declspec( dllimport )
#endif // OBJECTDETECTION_SOURCE
#else
#define OBJECTDETECTION_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define OBJECTDETECTION_DllAPI
#endif // _WIN32

namespace ObjectDetectionModule {

/*!
 * @brief This class represents the structure BoundingBox defined by the user in the IDL file.
 * @ingroup ObjectDetection
 */
class BoundingBox
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BoundingBox()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BoundingBox()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BoundingBox that will be copied.
     */
    eProsima_user_DllExport BoundingBox(
            const BoundingBox& x)
    {
                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_width = x.m_width;

                    m_height = x.m_height;

                    m_class_name = x.m_class_name;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BoundingBox that will be copied.
     */
    eProsima_user_DllExport BoundingBox(
            BoundingBox&& x) noexcept
    {
        m_x = x.m_x;
        m_y = x.m_y;
        m_width = x.m_width;
        m_height = x.m_height;
        m_class_name = std::move(x.m_class_name);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BoundingBox that will be copied.
     */
    eProsima_user_DllExport BoundingBox& operator =(
            const BoundingBox& x)
    {

                    m_x = x.m_x;

                    m_y = x.m_y;

                    m_width = x.m_width;

                    m_height = x.m_height;

                    m_class_name = x.m_class_name;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BoundingBox that will be copied.
     */
    eProsima_user_DllExport BoundingBox& operator =(
            BoundingBox&& x) noexcept
    {

        m_x = x.m_x;
        m_y = x.m_y;
        m_width = x.m_width;
        m_height = x.m_height;
        m_class_name = std::move(x.m_class_name);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BoundingBox object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BoundingBox& x) const
    {
        return (m_x == x.m_x &&
           m_y == x.m_y &&
           m_width == x.m_width &&
           m_height == x.m_height &&
           m_class_name == x.m_class_name);
    }

    /*!
     * @brief Comparison operator.
     * @param x BoundingBox object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BoundingBox& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member x
     * @param _x New value for member x
     */
    eProsima_user_DllExport void x(
            int32_t _x)
    {
        m_x = _x;
    }

    /*!
     * @brief This function returns the value of member x
     * @return Value of member x
     */
    eProsima_user_DllExport int32_t x() const
    {
        return m_x;
    }

    /*!
     * @brief This function returns a reference to member x
     * @return Reference to member x
     */
    eProsima_user_DllExport int32_t& x()
    {
        return m_x;
    }


    /*!
     * @brief This function sets a value in member y
     * @param _y New value for member y
     */
    eProsima_user_DllExport void y(
            int32_t _y)
    {
        m_y = _y;
    }

    /*!
     * @brief This function returns the value of member y
     * @return Value of member y
     */
    eProsima_user_DllExport int32_t y() const
    {
        return m_y;
    }

    /*!
     * @brief This function returns a reference to member y
     * @return Reference to member y
     */
    eProsima_user_DllExport int32_t& y()
    {
        return m_y;
    }


    /*!
     * @brief This function sets a value in member width
     * @param _width New value for member width
     */
    eProsima_user_DllExport void width(
            int32_t _width)
    {
        m_width = _width;
    }

    /*!
     * @brief This function returns the value of member width
     * @return Value of member width
     */
    eProsima_user_DllExport int32_t width() const
    {
        return m_width;
    }

    /*!
     * @brief This function returns a reference to member width
     * @return Reference to member width
     */
    eProsima_user_DllExport int32_t& width()
    {
        return m_width;
    }


    /*!
     * @brief This function sets a value in member height
     * @param _height New value for member height
     */
    eProsima_user_DllExport void height(
            int32_t _height)
    {
        m_height = _height;
    }

    /*!
     * @brief This function returns the value of member height
     * @return Value of member height
     */
    eProsima_user_DllExport int32_t height() const
    {
        return m_height;
    }

    /*!
     * @brief This function returns a reference to member height
     * @return Reference to member height
     */
    eProsima_user_DllExport int32_t& height()
    {
        return m_height;
    }


    /*!
     * @brief This function copies the value in member class_name
     * @param _class_name New value to be copied in member class_name
     */
    eProsima_user_DllExport void class_name(
            const std::string& _class_name)
    {
        m_class_name = _class_name;
    }

    /*!
     * @brief This function moves the value in member class_name
     * @param _class_name New value to be moved in member class_name
     */
    eProsima_user_DllExport void class_name(
            std::string&& _class_name)
    {
        m_class_name = std::move(_class_name);
    }

    /*!
     * @brief This function returns a constant reference to member class_name
     * @return Constant reference to member class_name
     */
    eProsima_user_DllExport const std::string& class_name() const
    {
        return m_class_name;
    }

    /*!
     * @brief This function returns a reference to member class_name
     * @return Reference to member class_name
     */
    eProsima_user_DllExport std::string& class_name()
    {
        return m_class_name;
    }



private:

    int32_t m_x{0};
    int32_t m_y{0};
    int32_t m_width{0};
    int32_t m_height{0};
    std::string m_class_name;

};
/*!
 * @brief This class represents the structure ObjectDetectionResult defined by the user in the IDL file.
 * @ingroup ObjectDetection
 */
class ObjectDetectionResult
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ObjectDetectionResult()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ObjectDetectionResult()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ObjectDetectionResult that will be copied.
     */
    eProsima_user_DllExport ObjectDetectionResult(
            const ObjectDetectionResult& x)
    {
                    m_boxes = x.m_boxes;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ObjectDetectionResult that will be copied.
     */
    eProsima_user_DllExport ObjectDetectionResult(
            ObjectDetectionResult&& x) noexcept
    {
        m_boxes = std::move(x.m_boxes);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ObjectDetectionResult that will be copied.
     */
    eProsima_user_DllExport ObjectDetectionResult& operator =(
            const ObjectDetectionResult& x)
    {

                    m_boxes = x.m_boxes;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ObjectDetectionResult that will be copied.
     */
    eProsima_user_DllExport ObjectDetectionResult& operator =(
            ObjectDetectionResult&& x) noexcept
    {

        m_boxes = std::move(x.m_boxes);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ObjectDetectionResult object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ObjectDetectionResult& x) const
    {
        return (m_boxes == x.m_boxes);
    }

    /*!
     * @brief Comparison operator.
     * @param x ObjectDetectionResult object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ObjectDetectionResult& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member boxes
     * @param _boxes New value to be copied in member boxes
     */
    eProsima_user_DllExport void boxes(
            const std::vector<BoundingBox>& _boxes)
    {
        m_boxes = _boxes;
    }

    /*!
     * @brief This function moves the value in member boxes
     * @param _boxes New value to be moved in member boxes
     */
    eProsima_user_DllExport void boxes(
            std::vector<BoundingBox>&& _boxes)
    {
        m_boxes = std::move(_boxes);
    }

    /*!
     * @brief This function returns a constant reference to member boxes
     * @return Constant reference to member boxes
     */
    eProsima_user_DllExport const std::vector<BoundingBox>& boxes() const
    {
        return m_boxes;
    }

    /*!
     * @brief This function returns a reference to member boxes
     * @return Reference to member boxes
     */
    eProsima_user_DllExport std::vector<BoundingBox>& boxes()
    {
        return m_boxes;
    }



private:

    std::vector<BoundingBox> m_boxes;

};

} // namespace ObjectDetectionModule

#endif // _FAST_DDS_GENERATED_OBJECTDETECTIONMODULE_OBJECTDETECTION_HPP_


