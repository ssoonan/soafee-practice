// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ObjectDetectionTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "ObjectDetectionTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "ObjectDetection.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace ObjectDetectionModule {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_BoundingBox_type_identifier(
        TypeIdentifierPair& type_ids_BoundingBox)
{

    ReturnCode_t return_code_BoundingBox {eprosima::fastdds::dds::RETCODE_OK};
    return_code_BoundingBox =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ObjectDetectionModule::BoundingBox", type_ids_BoundingBox);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_BoundingBox)
    {
        StructTypeFlag struct_flags_BoundingBox = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_BoundingBox = "ObjectDetectionModule::BoundingBox";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoundingBox;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoundingBox;
        CompleteTypeDetail detail_BoundingBox = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoundingBox, ann_custom_BoundingBox, type_name_BoundingBox.to_string());
        CompleteStructHeader header_BoundingBox;
        header_BoundingBox = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoundingBox);
        CompleteStructMemberSeq member_seq_BoundingBox;
        {
            TypeIdentifierPair type_ids_x;
            ReturnCode_t return_code_x {eprosima::fastdds::dds::RETCODE_OK};
            return_code_x =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_x);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_x)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "x Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_x = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_x = 0x00000000;
            bool common_x_ec {false};
            CommonStructMember common_x {TypeObjectUtils::build_common_struct_member(member_id_x, member_flags_x, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_x, common_x_ec))};
            if (!common_x_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure x member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_x = "x";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_x;
            ann_custom_BoundingBox.reset();
            CompleteMemberDetail detail_x = TypeObjectUtils::build_complete_member_detail(name_x, member_ann_builtin_x, ann_custom_BoundingBox);
            CompleteStructMember member_x = TypeObjectUtils::build_complete_struct_member(common_x, detail_x);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundingBox, member_x);
        }
        {
            TypeIdentifierPair type_ids_y;
            ReturnCode_t return_code_y {eprosima::fastdds::dds::RETCODE_OK};
            return_code_y =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_y);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_y)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "y Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_y = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_y = 0x00000001;
            bool common_y_ec {false};
            CommonStructMember common_y {TypeObjectUtils::build_common_struct_member(member_id_y, member_flags_y, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_y, common_y_ec))};
            if (!common_y_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure y member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_y = "y";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_y;
            ann_custom_BoundingBox.reset();
            CompleteMemberDetail detail_y = TypeObjectUtils::build_complete_member_detail(name_y, member_ann_builtin_y, ann_custom_BoundingBox);
            CompleteStructMember member_y = TypeObjectUtils::build_complete_struct_member(common_y, detail_y);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundingBox, member_y);
        }
        {
            TypeIdentifierPair type_ids_width;
            ReturnCode_t return_code_width {eprosima::fastdds::dds::RETCODE_OK};
            return_code_width =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_width);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_width)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "width Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_width = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_width = 0x00000002;
            bool common_width_ec {false};
            CommonStructMember common_width {TypeObjectUtils::build_common_struct_member(member_id_width, member_flags_width, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_width, common_width_ec))};
            if (!common_width_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure width member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_width = "width";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_width;
            ann_custom_BoundingBox.reset();
            CompleteMemberDetail detail_width = TypeObjectUtils::build_complete_member_detail(name_width, member_ann_builtin_width, ann_custom_BoundingBox);
            CompleteStructMember member_width = TypeObjectUtils::build_complete_struct_member(common_width, detail_width);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundingBox, member_width);
        }
        {
            TypeIdentifierPair type_ids_height;
            ReturnCode_t return_code_height {eprosima::fastdds::dds::RETCODE_OK};
            return_code_height =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_height);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_height)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "height Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_height = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_height = 0x00000003;
            bool common_height_ec {false};
            CommonStructMember common_height {TypeObjectUtils::build_common_struct_member(member_id_height, member_flags_height, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_height, common_height_ec))};
            if (!common_height_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure height member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_height = "height";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_height;
            ann_custom_BoundingBox.reset();
            CompleteMemberDetail detail_height = TypeObjectUtils::build_complete_member_detail(name_height, member_ann_builtin_height, ann_custom_BoundingBox);
            CompleteStructMember member_height = TypeObjectUtils::build_complete_struct_member(common_height, detail_height);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundingBox, member_height);
        }
        {
            TypeIdentifierPair type_ids_class_name;
            ReturnCode_t return_code_class_name {eprosima::fastdds::dds::RETCODE_OK};
            return_code_class_name =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_class_name);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_class_name)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_class_name))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_class_name = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_class_name = 0x00000004;
            bool common_class_name_ec {false};
            CommonStructMember common_class_name {TypeObjectUtils::build_common_struct_member(member_id_class_name, member_flags_class_name, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_class_name, common_class_name_ec))};
            if (!common_class_name_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure class_name member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_class_name = "class_name";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_class_name;
            ann_custom_BoundingBox.reset();
            CompleteMemberDetail detail_class_name = TypeObjectUtils::build_complete_member_detail(name_class_name, member_ann_builtin_class_name, ann_custom_BoundingBox);
            CompleteStructMember member_class_name = TypeObjectUtils::build_complete_struct_member(common_class_name, detail_class_name);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoundingBox, member_class_name);
        }
        CompleteStructType struct_type_BoundingBox = TypeObjectUtils::build_complete_struct_type(struct_flags_BoundingBox, header_BoundingBox, member_seq_BoundingBox);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoundingBox, type_name_BoundingBox.to_string(), type_ids_BoundingBox))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ObjectDetectionModule::BoundingBox already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ObjectDetectionResult_type_identifier(
        TypeIdentifierPair& type_ids_ObjectDetectionResult)
{

    ReturnCode_t return_code_ObjectDetectionResult {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ObjectDetectionResult =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "ObjectDetectionModule::ObjectDetectionResult", type_ids_ObjectDetectionResult);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ObjectDetectionResult)
    {
        StructTypeFlag struct_flags_ObjectDetectionResult = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ObjectDetectionResult = "ObjectDetectionModule::ObjectDetectionResult";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ObjectDetectionResult;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ObjectDetectionResult;
        CompleteTypeDetail detail_ObjectDetectionResult = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ObjectDetectionResult, ann_custom_ObjectDetectionResult, type_name_ObjectDetectionResult.to_string());
        CompleteStructHeader header_ObjectDetectionResult;
        header_ObjectDetectionResult = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ObjectDetectionResult);
        CompleteStructMemberSeq member_seq_ObjectDetectionResult;
        {
            TypeIdentifierPair type_ids_boxes;
            ReturnCode_t return_code_boxes {eprosima::fastdds::dds::RETCODE_OK};
            return_code_boxes =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded", type_ids_boxes);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_boxes)
            {
                return_code_boxes =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "ObjectDetectionModule::BoundingBox", type_ids_boxes);

                if (eprosima::fastdds::dds::RETCODE_OK != return_code_boxes)
                {
                    ObjectDetectionModule::register_BoundingBox_type_identifier(type_ids_boxes);
                }
                bool element_identifier_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded_ec {false};
                TypeIdentifier* element_identifier_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded {new TypeIdentifier(TypeObjectUtils::retrieve_complete_type_identifier(type_ids_boxes, element_identifier_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded_ec))};
                if (!element_identifier_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded_ec)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded = EK_COMPLETE;
                if (TK_NONE == type_ids_boxes.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded = 0;
                PlainCollectionHeader header_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded, element_flags_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded);
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded", type_ids_boxes))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_ObjectDetectionModule_BoundingBox_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_boxes = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_boxes = 0x00000000;
            bool common_boxes_ec {false};
            CommonStructMember common_boxes {TypeObjectUtils::build_common_struct_member(member_id_boxes, member_flags_boxes, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_boxes, common_boxes_ec))};
            if (!common_boxes_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure boxes member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_boxes = "boxes";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_boxes;
            ann_custom_ObjectDetectionResult.reset();
            CompleteMemberDetail detail_boxes = TypeObjectUtils::build_complete_member_detail(name_boxes, member_ann_builtin_boxes, ann_custom_ObjectDetectionResult);
            CompleteStructMember member_boxes = TypeObjectUtils::build_complete_struct_member(common_boxes, detail_boxes);
            TypeObjectUtils::add_complete_struct_member(member_seq_ObjectDetectionResult, member_boxes);
        }
        CompleteStructType struct_type_ObjectDetectionResult = TypeObjectUtils::build_complete_struct_type(struct_flags_ObjectDetectionResult, header_ObjectDetectionResult, member_seq_ObjectDetectionResult);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ObjectDetectionResult, type_name_ObjectDetectionResult.to_string(), type_ids_ObjectDetectionResult))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ObjectDetectionModule::ObjectDetectionResult already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace ObjectDetectionModule

