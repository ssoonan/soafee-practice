// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LaneDetection.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__LANEDETECTIONMODULE_LANEDETECTION_HPP
#define FAST_DDS_GENERATED__LANEDETECTIONMODULE_LANEDETECTION_HPP

#include <cstdint>
#include <utility>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LANEDETECTION_SOURCE)
#define LANEDETECTION_DllAPI __declspec( dllexport )
#else
#define LANEDETECTION_DllAPI __declspec( dllimport )
#endif // LANEDETECTION_SOURCE
#else
#define LANEDETECTION_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define LANEDETECTION_DllAPI
#endif // _WIN32

namespace LaneDetectionModule {

/*!
 * @brief This class represents the structure LaneLine defined by the user in the IDL file.
 * @ingroup LaneDetection
 */
class LaneLine
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LaneLine()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LaneLine()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LaneLine that will be copied.
     */
    eProsima_user_DllExport LaneLine(
            const LaneLine& x)
    {
                    m_x1 = x.m_x1;

                    m_y1 = x.m_y1;

                    m_x2 = x.m_x2;

                    m_y2 = x.m_y2;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LaneLine that will be copied.
     */
    eProsima_user_DllExport LaneLine(
            LaneLine&& x) noexcept
    {
        m_x1 = x.m_x1;
        m_y1 = x.m_y1;
        m_x2 = x.m_x2;
        m_y2 = x.m_y2;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LaneLine that will be copied.
     */
    eProsima_user_DllExport LaneLine& operator =(
            const LaneLine& x)
    {

                    m_x1 = x.m_x1;

                    m_y1 = x.m_y1;

                    m_x2 = x.m_x2;

                    m_y2 = x.m_y2;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LaneLine that will be copied.
     */
    eProsima_user_DllExport LaneLine& operator =(
            LaneLine&& x) noexcept
    {

        m_x1 = x.m_x1;
        m_y1 = x.m_y1;
        m_x2 = x.m_x2;
        m_y2 = x.m_y2;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x LaneLine object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LaneLine& x) const
    {
        return (m_x1 == x.m_x1 &&
           m_y1 == x.m_y1 &&
           m_x2 == x.m_x2 &&
           m_y2 == x.m_y2);
    }

    /*!
     * @brief Comparison operator.
     * @param x LaneLine object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LaneLine& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member x1
     * @param _x1 New value for member x1
     */
    eProsima_user_DllExport void x1(
            int32_t _x1)
    {
        m_x1 = _x1;
    }

    /*!
     * @brief This function returns the value of member x1
     * @return Value of member x1
     */
    eProsima_user_DllExport int32_t x1() const
    {
        return m_x1;
    }

    /*!
     * @brief This function returns a reference to member x1
     * @return Reference to member x1
     */
    eProsima_user_DllExport int32_t& x1()
    {
        return m_x1;
    }


    /*!
     * @brief This function sets a value in member y1
     * @param _y1 New value for member y1
     */
    eProsima_user_DllExport void y1(
            int32_t _y1)
    {
        m_y1 = _y1;
    }

    /*!
     * @brief This function returns the value of member y1
     * @return Value of member y1
     */
    eProsima_user_DllExport int32_t y1() const
    {
        return m_y1;
    }

    /*!
     * @brief This function returns a reference to member y1
     * @return Reference to member y1
     */
    eProsima_user_DllExport int32_t& y1()
    {
        return m_y1;
    }


    /*!
     * @brief This function sets a value in member x2
     * @param _x2 New value for member x2
     */
    eProsima_user_DllExport void x2(
            int32_t _x2)
    {
        m_x2 = _x2;
    }

    /*!
     * @brief This function returns the value of member x2
     * @return Value of member x2
     */
    eProsima_user_DllExport int32_t x2() const
    {
        return m_x2;
    }

    /*!
     * @brief This function returns a reference to member x2
     * @return Reference to member x2
     */
    eProsima_user_DllExport int32_t& x2()
    {
        return m_x2;
    }


    /*!
     * @brief This function sets a value in member y2
     * @param _y2 New value for member y2
     */
    eProsima_user_DllExport void y2(
            int32_t _y2)
    {
        m_y2 = _y2;
    }

    /*!
     * @brief This function returns the value of member y2
     * @return Value of member y2
     */
    eProsima_user_DllExport int32_t y2() const
    {
        return m_y2;
    }

    /*!
     * @brief This function returns a reference to member y2
     * @return Reference to member y2
     */
    eProsima_user_DllExport int32_t& y2()
    {
        return m_y2;
    }



private:

    int32_t m_x1{0};
    int32_t m_y1{0};
    int32_t m_x2{0};
    int32_t m_y2{0};

};
/*!
 * @brief This class represents the structure LaneDetectionResult defined by the user in the IDL file.
 * @ingroup LaneDetection
 */
class LaneDetectionResult
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LaneDetectionResult()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LaneDetectionResult()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LaneDetectionResult that will be copied.
     */
    eProsima_user_DllExport LaneDetectionResult(
            const LaneDetectionResult& x)
    {
                    m_left_lane = x.m_left_lane;

                    m_right_lane = x.m_right_lane;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LaneDetectionResult that will be copied.
     */
    eProsima_user_DllExport LaneDetectionResult(
            LaneDetectionResult&& x) noexcept
    {
        m_left_lane = std::move(x.m_left_lane);
        m_right_lane = std::move(x.m_right_lane);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LaneDetectionResult that will be copied.
     */
    eProsima_user_DllExport LaneDetectionResult& operator =(
            const LaneDetectionResult& x)
    {

                    m_left_lane = x.m_left_lane;

                    m_right_lane = x.m_right_lane;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LaneDetectionResult that will be copied.
     */
    eProsima_user_DllExport LaneDetectionResult& operator =(
            LaneDetectionResult&& x) noexcept
    {

        m_left_lane = std::move(x.m_left_lane);
        m_right_lane = std::move(x.m_right_lane);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x LaneDetectionResult object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LaneDetectionResult& x) const
    {
        return (m_left_lane == x.m_left_lane &&
           m_right_lane == x.m_right_lane);
    }

    /*!
     * @brief Comparison operator.
     * @param x LaneDetectionResult object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LaneDetectionResult& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member left_lane
     * @param _left_lane New value to be copied in member left_lane
     */
    eProsima_user_DllExport void left_lane(
            const LaneLine& _left_lane)
    {
        m_left_lane = _left_lane;
    }

    /*!
     * @brief This function moves the value in member left_lane
     * @param _left_lane New value to be moved in member left_lane
     */
    eProsima_user_DllExport void left_lane(
            LaneLine&& _left_lane)
    {
        m_left_lane = std::move(_left_lane);
    }

    /*!
     * @brief This function returns a constant reference to member left_lane
     * @return Constant reference to member left_lane
     */
    eProsima_user_DllExport const LaneLine& left_lane() const
    {
        return m_left_lane;
    }

    /*!
     * @brief This function returns a reference to member left_lane
     * @return Reference to member left_lane
     */
    eProsima_user_DllExport LaneLine& left_lane()
    {
        return m_left_lane;
    }


    /*!
     * @brief This function copies the value in member right_lane
     * @param _right_lane New value to be copied in member right_lane
     */
    eProsima_user_DllExport void right_lane(
            const LaneLine& _right_lane)
    {
        m_right_lane = _right_lane;
    }

    /*!
     * @brief This function moves the value in member right_lane
     * @param _right_lane New value to be moved in member right_lane
     */
    eProsima_user_DllExport void right_lane(
            LaneLine&& _right_lane)
    {
        m_right_lane = std::move(_right_lane);
    }

    /*!
     * @brief This function returns a constant reference to member right_lane
     * @return Constant reference to member right_lane
     */
    eProsima_user_DllExport const LaneLine& right_lane() const
    {
        return m_right_lane;
    }

    /*!
     * @brief This function returns a reference to member right_lane
     * @return Reference to member right_lane
     */
    eProsima_user_DllExport LaneLine& right_lane()
    {
        return m_right_lane;
    }



private:

    LaneLine m_left_lane;
    LaneLine m_right_lane;

};

} // namespace LaneDetectionModule

#endif // _FAST_DDS_GENERATED_LANEDETECTIONMODULE_LANEDETECTION_HPP_


